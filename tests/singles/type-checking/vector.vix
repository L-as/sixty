data Nat where
  Z : Nat
  S : Nat -> Nat

data Vector n a where
  Nil : Vector Z a
  Cons : forall m. a -> Vector m a -> Vector (S m) a

matchZero : Vector Z Nat -> Nat
matchZero Nil = Z

matchSucc : Vector (S Z) Nat -> Nat
matchSucc Nil = Z
matchSucc (Cons _ Nil) = S Z

zipWith : forall a b c n. (a -> b -> c) -> Vector n a -> Vector n b -> Vector n c
zipWith f Nil Nil = Nil
zipWith f (Cons a as) (Cons b bs) = Cons (f a b) (zipWith f as bs)

nil = Nil @{a = Nat}

cons = Cons Z Nil

cons' : Vector (S Z) Nat
cons' = Cons Z Nil
