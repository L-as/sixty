data Tuple a b where
  MkTuple : a -> b -> Tuple a b

data Nat where
  Z : Nat
  S : Nat -> Nat

data Vector n a where
  Nil : Vector Z a
  Cons : forall m. a -> Vector m a -> Vector (S m) a

zipWithCase : forall a b c n. (a -> b -> c) -> Vector n a -> Vector n b -> Vector n c
zipWithCase f as bs =
  case MkTuple as bs of
    MkTuple Nil Nil -> Nil
    MkTuple (Cons a as') (Cons b bs') -> Cons (f a b) (zipWithCase f as' bs')
